name: Sistema de Marcaje Automático - Enterprise

on:
  schedule:
    # HORARIO DE VERANO (septiembre - marzo): UTC-3
    - cron: "10 11 * * 1-5" # 08:10 CLT (Lunes a Viernes) - VERANO
    - cron: "30 20 * * 1-5" # 17:30 CLT (Lunes a Viernes) - VERANO
    
    # HORARIO DE INVIERNO (marzo - septiembre): UTC-4 (comentado)
    # - cron: "10 12 * * 1-5" # 08:10 CLT (Lunes a Viernes) - INVIERNO
    # - cron: "30 21 * * 1-5" # 17:30 CLT (Lunes a Viernes) - INVIERNO
  
  # push:
  #   branches: ["main"]
  
  workflow_dispatch:
    inputs:
      debug_mode:
        description: "Forzar modo DEBUG"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

jobs:
  marcar-turno:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # 1 hora - Tiempo suficiente para procesos de marcaje
    env:
      CLOCK_IN_ACTIVE: ${{ secrets.CLOCK_IN_ACTIVE }}
      DEBUG_MODE: ${{ github.event.inputs.debug_mode || secrets.DEBUG_MODE }}
      EMAIL_ADDRESS_B64: ${{ secrets.EMAIL_ADDRESS_B64 }}
      EMAIL_PASS_B64: ${{ secrets.EMAIL_PASS_B64 }}
      SPECIAL_EMAIL_TO: ${{ secrets.SPECIAL_EMAIL_TO }}
      DEFAULT_EMAIL_TO: ${{ secrets.DEFAULT_EMAIL_TO }}
      SPECIAL_RUT_B64: ${{ secrets.SPECIAL_RUT_B64 }}
      ACTIVE_RUTS_B64: ${{ secrets.ACTIVE_RUTS_B64 }}
      EXCEPTIONS_RUTS_B64: ${{ secrets.EXCEPTIONS_RUTS_B64 }}
      TZ: "America/Santiago"

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Instalar Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "⚠️ No se encontró requirements.txt"
            exit 1
          fi

      - name: Crear directorios necesarios
        run: |
          mkdir -p logs reports backups

      - name: Verificar configuración básica
        run: |
          echo "🔧 Verificando configuración básica..."
          python -c "
          from dotenv import load_dotenv
          import os
          load_dotenv()
          print('✅ Configuración verificada')
          print(f'DEBUG_MODE: {os.getenv(\"DEBUG_MODE\", \"false\")}')
          print(f'CLOCK_IN_ACTIVE: {os.getenv(\"CLOCK_IN_ACTIVE\", \"true\")}')
          " || echo "⚠️ Verificación falló, continuando..."

      - name: Ejecutar sistema de marcaje
        run: |
          echo "🚀 Iniciando sistema de marcaje..."
          echo "⏰ Hora de inicio: $(date)"
          echo "🔧 DEBUG_MODE: $DEBUG_MODE"
          python main.py || {
            echo "❌ Error en ejecución principal"
            exit 1
          }
          echo "✅ Sistema finalizado exitosamente"
          echo "⏰ Hora de fin: $(date)"
        env:
          PYTHONUNBUFFERED: 1
          GITHUB_RUN_NUMBER: ${{ github.run_number }}

      - name: Generar reporte post-ejecución
        if: always()
        run: |
          echo "📊 Generando reporte post-ejecución..."
          python -c "
          try:
              import os
              from datetime import datetime
              print('📊 Reporte simple:')
              print(f'   Timestamp: {datetime.now()}')
              print(f'   Run number: {os.environ.get(\"GITHUB_RUN_NUMBER\", \"N/A\")}')
              print(f'   Debug mode: {os.environ.get(\"DEBUG_MODE\", \"false\")}')
              if os.path.exists('logs'):
                  logs = [f for f in os.listdir('logs') if f.endswith('.log')]
                  print(f'   Logs generados: {len(logs)}')
              print('✅ Reporte generado')
          except Exception as e:
              print(f'⚠️ Error en reporte: {e}')
          "

      - name: Mostrar estadísticas
        if: always()
        run: |
          echo "📁 Contenido del directorio logs:"
          ls -la logs/ || echo "No hay logs"
          echo ""
          echo "📊 Archivos de reporte:"
          ls -la *.json 2>/dev/null || echo "No hay reportes JSON"

      - name: Subir archivo de logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: marcaje-logs-${{ github.run_number }}
          path: |
            logs/
          retention-days: 30